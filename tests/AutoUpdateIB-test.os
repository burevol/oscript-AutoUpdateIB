#Использовать ".."

Перем юТест;
Перем Обновлятор;

Процедура Инициализация()
	
	Обновлятор = Новый Обновлятор();

	Обновлятор.УстановитьРежимОтладки(РежимОтладки());
    Лог = Обновлятор.ПолучитьЛог();
	
КонецПроцедуры

Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	юТест = ЮнитТестирование;
	
	СписокТестов = Новый Массив;
	СписокТестов.Добавить("ТестДолжен_ПроверитьУстановкуКаталогов");
	СписокТестов.Добавить("ТестДолжен_ПроверитьУстановкуПараметровАутентификации");
	СписокТестов.Добавить("ТестДолжен_ПроверитьУстановкуПараметровЗавершенияСоединения");
	СписокТестов.Добавить("ТестДолжен_ПроверитьПолучениеПараметровБлокировкиCеансов");
	СписокТестов.Добавить("ТестДолжен_ПроверитьПолучениеПараметровРезервногоКопирования");
	СписокТестов.Добавить("ТестДолжен_ПроверитьПолучениеПараметровОбновленияКонфигурации");
		
	Возврат СписокТестов;
	
КонецФункции

Процедура ТестДолжен_ПроверитьУстановкуКаталогов() Экспорт

	Каталоги = Обновлятор.ПолучитьПараметры("Каталоги");
	Утверждения.ПроверитьРавенство(ТипЗнч(Каталоги), Тип("Структура"), "Возвращенное значение ""Каталоги"" не является структурой.");
	Утверждения.ПроверитьИстину(Каталоги.Свойство("КаталогФайловОбновления"), "Не найден ключ КаталогФайловОбновления.");
	Утверждения.ПроверитьИстину(Каталоги.Свойство("КаталогВременныхФайлов"), "Не найден ключ КаталогВременныхФайлов.");

	СистемнаяИнформация = Новый СистемнаяИнформация();
	КаталогTEMP = ПолучитьПеременнуюСреды("TEMP");
	Обновлятор.УстановитьКаталоги(КаталогTEMP, КаталогTEMP);
	Каталоги = Обновлятор.ПолучитьПараметры("Каталоги");
	Для Каждого Параметр Из Каталоги Цикл
		Утверждения.ПроверитьРавенство(Параметр.Значение, КаталогTEMP, 
			СтрШаблон("Каталог по ключу %1 не установлен.", Параметр.Ключ));
	КонецЦикла; 

КонецПроцедуры

Процедура ТестДолжен_ПроверитьУстановкуПараметровАутентификации() Экспорт

	ПараметрыАутентификации = Обновлятор.ПолучитьПараметры("ПараметрыАутентификации");
	Утверждения.ПроверитьРавенство(ТипЗнч(ПараметрыАутентификации), Тип("Структура"), "Возвращенное значение ""ПараметрыАутентификации"" не является структурой.");
	Утверждения.ПроверитьИстину(ПараметрыАутентификации.Свойство("Пользователь"), "Не найден ключ Пользователь.");
	Утверждения.ПроверитьИстину(ПараметрыАутентификации.Свойство("Пароль"), "Не найден ключ Пароль.");

	Обновлятор.УстановитьПараметрыАутентификации("Пользователь", "Пароль");
	ПараметрыАутентификации = Обновлятор.ПолучитьПараметры("ПараметрыАутентификации");
	Утверждения.ПроверитьРавенство(ПараметрыАутентификации.Пользователь, "Пользователь", "Параметр аутентификации по ключу Пользователь не установлен");
	Утверждения.ПроверитьРавенство(ПараметрыАутентификации.Пароль, "Пароль", "Параметр аутентификации по ключу Пароль не установлен");

КонецПроцедуры

Процедура ТестДолжен_ПроверитьУстановкуПараметровЗавершенияСоединения() Экспорт

	ПараметрыЗавершенияСоединения = Обновлятор.ПолучитьПараметры("ПараметрыЗавершенияСоединения");
	Утверждения.ПроверитьРавенство(ТипЗнч(ПараметрыЗавершенияСоединения), Тип("Структура"), "Возвращенное значение ""ПараметрыЗавершенияСоединения"" не является структурой.");
	Утверждения.ПроверитьИстину(ПараметрыЗавершенияСоединения.Свойство("ОжидатьЗавершениеСоединения"), "Не найден ключ ОжидатьЗавершениеСоединения.");
	Утверждения.ПроверитьИстину(ПараметрыЗавершенияСоединения.Свойство("МаксИнтервалОжиданияФайловойИБ"), "Не найден ключ МаксИнтервалОжиданияФайловойИБ.");
	Утверждения.ПроверитьИстину(ПараметрыЗавершенияСоединения.Свойство("ИнтервалОжиданияСервернойИБ"), "Не найден ключ ИнтервалОжиданияСервернойИБ.");

	Обновлятор.УстановитьПараметрыЗавершенияСоединения(Ложь, 0, 0);
	ПараметрыЗавершенияСоединения = Обновлятор.ПолучитьПараметры("ПараметрыЗавершенияСоединения");
	Утверждения.ПроверитьРавенство(ПараметрыЗавершенияСоединения.ОжидатьЗавершениеСоединения, Ложь, "Параметр завершения соединения по ключу ОжидатьЗавершениеСоединения не установлен");
	Утверждения.ПроверитьРавенство(ПараметрыЗавершенияСоединения.МаксИнтервалОжиданияФайловойИБ, 0, "Параметр завершения соединения по ключу МаксИнтервалОжиданияФайловойИБ не установлен");
	Утверждения.ПроверитьРавенство(ПараметрыЗавершенияСоединения.ИнтервалОжиданияСервернойИБ, 0, "Параметр завершения соединения по ключу ИнтервалОжиданияСервернойИБ не установлен");

КонецПроцедуры

Процедура ТестДолжен_ПроверитьПолучениеПараметровБлокировкиCеансов() Экспорт

	ПараметрыБлокировкиCеансов = Обновлятор.ПолучитьПараметры("ПараметрыБлокировкиCеансов");
	Утверждения.ПроверитьРавенство(ТипЗнч(ПараметрыБлокировкиCеансов), Тип("Структура"), "Возвращенное значение ""ПараметрыБлокировкиCеансов"" не является структурой.");
	Утверждения.ПроверитьИстину(ПараметрыБлокировкиCеансов.Свойство("БлокироватьСеансыИБ"), "Не найден ключ БлокироватьСеансыИБ.");
	Утверждения.ПроверитьИстину(ПараметрыБлокировкиCеансов.Свойство("ИспользованиеИБ"), "Не найден ключ ИспользованиеИБ.");
	Утверждения.ПроверитьИстину(ПараметрыБлокировкиCеансов.Свойство("ИнтервалОжидания"), "Не найден ключ ИнтервалОжидания.");

	Обновлятор.УстановитьПараметрыБлокировкиCеансов(Ложь, Ложь, 0);
	ПараметрыБлокировкиCеансов = Обновлятор.ПолучитьПараметры("ПараметрыБлокировкиCеансов");
	Утверждения.ПроверитьРавенство(ПараметрыБлокировкиCеансов.БлокироватьСеансыИБ, Ложь, "Параметр блокировки сеансов по ключу БлокироватьСеансыИБ не установлен");
	Утверждения.ПроверитьРавенство(ПараметрыБлокировкиCеансов.ИспользованиеИБ, Ложь, "Параметр блокировки сеансов по ключу ИспользованиеИБ не установлен");
	Утверждения.ПроверитьРавенство(ПараметрыБлокировкиCеансов.ИнтервалОжидания, 0, "Параметр блокировки сеансов по ключу ИнтервалОжидания не установлен");

КонецПроцедуры

Процедура ТестДолжен_ПроверитьПолучениеПараметровРезервногоКопирования() Экспорт

	ПараметрыРезервногоКопирования = Обновлятор.ПолучитьПараметры("ПараметрыРезервногоКопирования");
	Утверждения.ПроверитьРавенство(ТипЗнч(ПараметрыРезервногоКопирования), Тип("Структура"), "Возвращенное значение ""ПараметрыРезервногоКопирования"" не является структурой.");
	Утверждения.ПроверитьИстину(ПараметрыРезервногоКопирования.Свойство("СоздаватьРезервнуюКопию"), "Не найден ключ СоздаватьРезервнуюКопию.");
	Утверждения.ПроверитьИстину(ПараметрыРезервногоКопирования.Свойство("КаталогРезервныхКопий"), "Не найден ключ КаталогРезервныхКопий.");
	Утверждения.ПроверитьИстину(ПараметрыРезервногоКопирования.Свойство("ВосстанавливатьИнформационнуюБазу"), "Не найден ключ ВосстанавливатьИнформационнуюБазу.");

	Обновлятор.УстановитьПараметрыРезервногоКопирования(Ложь);
	ПараметрыРезервногоКопирования = Обновлятор.ПолучитьПараметры("ПараметрыРезервногоКопирования");
	Утверждения.ПроверитьРавенство(ПараметрыРезервногоКопирования.СоздаватьРезервнуюКопию, Ложь, "Параметр резервного копирования по ключу СоздаватьРезервнуюКопию не установлен");
	
	СистемнаяИнформация = Новый СистемнаяИнформация();
	КаталогTEMP = ПолучитьПеременнуюСреды("TEMP");
	Обновлятор.УстановитьПараметрыРезервногоКопирования(Истина, КаталогTEMP, Ложь);
	ПараметрыРезервногоКопирования = Обновлятор.ПолучитьПараметры("ПараметрыРезервногоКопирования");
	Утверждения.ПроверитьРавенство(ПараметрыРезервногоКопирования.КаталогРезервныхКопий, КаталогTEMP, "Параметр резервного копирования по ключу КаталогРезервныхКопий не установлен");
	Утверждения.ПроверитьРавенство(ПараметрыРезервногоКопирования.ВосстанавливатьИнформационнуюБазу, Ложь, "Параметр резервного копирования по ключу ВосстанавливатьИнформационнуюБазу не установлен");

КонецПроцедуры

Процедура ТестДолжен_ПроверитьПолучениеПараметровОбновленияКонфигурации() Экспорт
	
	СистемнаяИнформация = Новый СистемнаяИнформация();
	КаталогTEMP = ПолучитьПеременнуюСреды("TEMP");
	Обновлятор.УстановитьКаталоги(, ОбъединитьПути(КаталогTEMP, "AutoUpdateIB"));

	ПараметрыОбновленияКонфигурации = Обновлятор.ПолучитьПараметрыОбновленияКонфигурации();
    Если ПараметрыОбновленияКонфигурации <> Неопределено Тогда
	
		Утверждения.ПроверитьРавенство(ТипЗнч(ПараметрыОбновленияКонфигурации), Тип("Структура"), "Возвращенное значение ""ПараметрыОбновленияКонфигурации"" не является структурой.");
		Утверждения.ПроверитьИстину(ПараметрыОбновленияКонфигурации.Свойство("ТипКонфигурации"), "Не найден ключ ТипКонфигурации.");
		Утверждения.ПроверитьИстину(ПараметрыОбновленияКонфигурации.Свойство("ВерсияРелиза"), "Не найден ключ ВерсияРелиза.");
		Утверждения.ПроверитьИстину(ПараметрыОбновленияКонфигурации.Свойство("ВерсияПлатформы"), "Не найден ключ ВерсияПлатформы.");
		Утверждения.ПроверитьИстину(ПараметрыОбновленияКонфигурации.Свойство("МассивОбновлений"), "Не найден ключ МассивОбновлений.");
		
		МассивОбновлений = ПараметрыОбновленияКонфигурации.МассивОбновлений;
		Утверждения.ПроверитьРавенство(ТипЗнч(МассивОбновлений), Тип("Массив"), "Возвращенное значение ""ПараметрыОбновленияКонфигурации.МассивОбновлений"" не является массивом.");
		Утверждения.ПроверитьБольшеИлиРавно(МассивОбновлений.Количество(), 1, "Не сформирован массив со списком обновлений конфигурации");   
	
	КонецЕсли;
	
	ФайлСпискаШаблонов = ОбъединитьПути(КаталогTEMP, "AutoUpdateIB\v8cscdsc.xml"); 
	ФайлСпискаШаблоновОбъект = Новый Файл(ФайлСпискаШаблонов);
	Утверждения.ПроверитьЛожь(ФайлСпискаШаблоновОбъект.Существует(), "Временный файл v8cscdsc.xml не удален");

КонецПроцедуры

Функция РежимОтладки()
   
	Для каждого АргументКомСтроки из АргументыКоманднойСтроки Цикл
        Если НРег(АргументКомСтроки) = "--debug" Тогда
            Возврат Истина;
        КонецЕсли; 
    КонецЦикла;
	
    Возврат Ложь;

КонецФункции

Инициализация();